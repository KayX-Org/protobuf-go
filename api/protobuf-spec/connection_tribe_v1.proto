syntax = "proto3";

package connections.tribe;
option go_package = "connections/tribepb;tribepb";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "api/protobuf-spec/general.proto";

message Tribe {
  string id = 1;
  string name = 2;
  string code = 3;
  string logo_url = 4;
  string type = 5;
  string tag_line = 6;
  string description = 7;
  string language = 8;
  string headquarters = 9;
  string website_url = 10;
  string youtube_url = 11;
  string facebook_url = 12;
  string twitter_url = 13;
}

message FAQ {
  string type = 1;
  string content = 2;
  repeated FAQ childs = 3;
}

message TribeInviteCode {
  string tribe_id = 1;
  string code = 2;
}

message TribeActivity {
  string id = 1;
  string rich_text = 2;
  string plain_text = 3;
  string tribe_id = 4;
  google.protobuf.Timestamp createdAt = 5;
}

message UserTribeConnection {
  string tribe_id = 1;
  bool new = 2;
}

message TribeUserConnection {
  string user_id = 1;
  bool new = 2;
}

message GetTribeRequest {
  string id = 1;
}

message GetTribesRequest {
  repeated string ids = 1;
}

message GetTribeActivityRequest {
  string tribe_id = 1;
}

message GetTribeActivityResponse {
  repeated TribeActivity activity = 1;
}

message GetTribeResponse {
  Tribe tribe = 1;
}

message GetTribesResponse {
  repeated Tribe tribes = 1;
}

message SendInviteRequest {
  string sender_id = 1;
  string receiver_id = 2;
  string tribe_id = 3;
}

message AcceptInviteRequest {
  string user_id = 1;
  string code = 2;
}

message DeclineInviteRequest {
  string user_id = 1;
  string code = 2;
}

message ConnectToTribeWithCodeRequest {
  string user_id = 1;
  string code = 2;
}

message GetTribesPerUserRequest {
  string user_id = 1;
  general.Pagination pagination = 2;
}

message TribesPerUserResponse {
  repeated string tribe_id = 1;
}

message SharedTribesRequest {
  string user_from_id = 1;
  string user_to_id = 2;
}

message GetTribesPerUserResponse {
  repeated UserTribeConnection tribes = 1;
}

message SharedTribesResponse {
  repeated string tribe_ids = 1;
}

message GetTribeMembersRequest {
  string tribe_id = 1;
  general.Pagination pagination = 2;
}

message GetTribeMembersResponse {
  repeated TribeUserConnection users = 1;
}

message GetInvitesRequest {
  string user_id = 1;
  general.Pagination pagination = 2;
}

message GetMutualConnectionAmountRequest {
  string user_id = 1;
  string tribe_id = 2;
}

message GetMutualConnectionAmountResponse {
  int32 total = 1;
}

message DisconnectUserFromTribeRequest {
  string userId = 1;
  string tribe_id = 2;
}

message GetInvitesResponse {
  repeated TribeInviteCode tribe_invite_codes = 1;
}

message GetFAQResponse {
  repeated FAQ faq = 1;
}

message FetchNumberOfNewConnectionsRequest {
  string user_id = 1;
}

message FetchNumberOfNewConnectionsResponse {
  int32 total = 1;
}

service TribeService {
  rpc GetTribe(GetTribeRequest) returns (GetTribeResponse) {};
  rpc GetTribes(GetTribesRequest) returns (GetTribesResponse) {};
  rpc GetTribeActivity(GetTribeActivityRequest) returns (GetTribeActivityResponse) {};
  rpc SharedTribes(SharedTribesRequest) returns (SharedTribesResponse) {};
  rpc SendInvite(SendInviteRequest) returns (google.protobuf.Empty) {};
  rpc AcceptInvite(AcceptInviteRequest) returns (google.protobuf.Empty) {};
  rpc DeclineInvite(DeclineInviteRequest) returns (google.protobuf.Empty) {};
  rpc ConnectToTribeWithCode(ConnectToTribeWithCodeRequest) returns (google.protobuf.Empty) {};
  rpc GetTribesPerUser(GetTribesPerUserRequest) returns (GetTribesPerUserResponse) {};
  rpc GetTribeMembers(GetTribeMembersRequest) returns (GetTribeMembersResponse) {};
  rpc GetInvites(GetInvitesRequest) returns (GetInvitesResponse) {};
  rpc GetMutualConnections(GetMutualConnectionAmountRequest) returns (GetMutualConnectionAmountResponse) {};
  rpc DisconnectUserFromTribe(DisconnectUserFromTribeRequest) returns (google.protobuf.Empty) {};
  rpc GetFAQ(google.protobuf.Empty) returns (GetFAQResponse) {};
  rpc FetchNumberOfNewConnections(FetchNumberOfNewConnectionsRequest) returns (FetchNumberOfNewConnectionsResponse) {};
}

