// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: api/protobuf-spec/connection_tribe_v1.proto

package tribepb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	generalpb "github.com/kayx-org/protobuf-go/general/generalpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Tribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code         string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	LogoUrl      string `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	Type         string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	TagLine      string `protobuf:"bytes,6,opt,name=tag_line,json=tagLine,proto3" json:"tag_line,omitempty"`
	Description  string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Language     string `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	Headquarters string `protobuf:"bytes,9,opt,name=headquarters,proto3" json:"headquarters,omitempty"`
	WebsiteUrl   string `protobuf:"bytes,10,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
	YoutubeUrl   string `protobuf:"bytes,11,opt,name=youtube_url,json=youtubeUrl,proto3" json:"youtube_url,omitempty"`
	FacebookUrl  string `protobuf:"bytes,12,opt,name=facebook_url,json=facebookUrl,proto3" json:"facebook_url,omitempty"`
	TwitterUrl   string `protobuf:"bytes,13,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
}

func (x *Tribe) Reset() {
	*x = Tribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tribe) ProtoMessage() {}

func (x *Tribe) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tribe.ProtoReflect.Descriptor instead.
func (*Tribe) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{0}
}

func (x *Tribe) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tribe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tribe) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Tribe) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Tribe) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Tribe) GetTagLine() string {
	if x != nil {
		return x.TagLine
	}
	return ""
}

func (x *Tribe) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tribe) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Tribe) GetHeadquarters() string {
	if x != nil {
		return x.Headquarters
	}
	return ""
}

func (x *Tribe) GetWebsiteUrl() string {
	if x != nil {
		return x.WebsiteUrl
	}
	return ""
}

func (x *Tribe) GetYoutubeUrl() string {
	if x != nil {
		return x.YoutubeUrl
	}
	return ""
}

func (x *Tribe) GetFacebookUrl() string {
	if x != nil {
		return x.FacebookUrl
	}
	return ""
}

func (x *Tribe) GetTwitterUrl() string {
	if x != nil {
		return x.TwitterUrl
	}
	return ""
}

type FAQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Childs  []*FAQ `protobuf:"bytes,3,rep,name=childs,proto3" json:"childs,omitempty"`
}

func (x *FAQ) Reset() {
	*x = FAQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FAQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FAQ) ProtoMessage() {}

func (x *FAQ) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FAQ.ProtoReflect.Descriptor instead.
func (*FAQ) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{1}
}

func (x *FAQ) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FAQ) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FAQ) GetChilds() []*FAQ {
	if x != nil {
		return x.Childs
	}
	return nil
}

type TribeInviteCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeId string `protobuf:"bytes,1,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *TribeInviteCode) Reset() {
	*x = TribeInviteCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TribeInviteCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TribeInviteCode) ProtoMessage() {}

func (x *TribeInviteCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TribeInviteCode.ProtoReflect.Descriptor instead.
func (*TribeInviteCode) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{2}
}

func (x *TribeInviteCode) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

func (x *TribeInviteCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TribeActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RichText  string               `protobuf:"bytes,2,opt,name=rich_text,json=richText,proto3" json:"rich_text,omitempty"`
	PlainText string               `protobuf:"bytes,3,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
	TribeId   string               `protobuf:"bytes,4,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *TribeActivity) Reset() {
	*x = TribeActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TribeActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TribeActivity) ProtoMessage() {}

func (x *TribeActivity) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TribeActivity.ProtoReflect.Descriptor instead.
func (*TribeActivity) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{3}
}

func (x *TribeActivity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TribeActivity) GetRichText() string {
	if x != nil {
		return x.RichText
	}
	return ""
}

func (x *TribeActivity) GetPlainText() string {
	if x != nil {
		return x.PlainText
	}
	return ""
}

func (x *TribeActivity) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

func (x *TribeActivity) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UserTribeConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeId string `protobuf:"bytes,1,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
	New     bool   `protobuf:"varint,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *UserTribeConnection) Reset() {
	*x = UserTribeConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTribeConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTribeConnection) ProtoMessage() {}

func (x *UserTribeConnection) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTribeConnection.ProtoReflect.Descriptor instead.
func (*UserTribeConnection) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{4}
}

func (x *UserTribeConnection) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

func (x *UserTribeConnection) GetNew() bool {
	if x != nil {
		return x.New
	}
	return false
}

type TribeUserConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	New    bool   `protobuf:"varint,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *TribeUserConnection) Reset() {
	*x = TribeUserConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TribeUserConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TribeUserConnection) ProtoMessage() {}

func (x *TribeUserConnection) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TribeUserConnection.ProtoReflect.Descriptor instead.
func (*TribeUserConnection) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{5}
}

func (x *TribeUserConnection) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TribeUserConnection) GetNew() bool {
	if x != nil {
		return x.New
	}
	return false
}

type GetTribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTribeRequest) Reset() {
	*x = GetTribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeRequest) ProtoMessage() {}

func (x *GetTribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeRequest.ProtoReflect.Descriptor instead.
func (*GetTribeRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{6}
}

func (x *GetTribeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateTribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code         string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Tagline      string `protobuf:"bytes,4,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Language     string `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	Headquarters string `protobuf:"bytes,7,opt,name=headquarters,proto3" json:"headquarters,omitempty"`
	WbesiteUrl   string `protobuf:"bytes,8,opt,name=wbesite_url,json=wbesiteUrl,proto3" json:"wbesite_url,omitempty"`
}

func (x *UpdateTribeRequest) Reset() {
	*x = UpdateTribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTribeRequest) ProtoMessage() {}

func (x *UpdateTribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTribeRequest.ProtoReflect.Descriptor instead.
func (*UpdateTribeRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTribeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTribeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTribeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateTribeRequest) GetTagline() string {
	if x != nil {
		return x.Tagline
	}
	return ""
}

func (x *UpdateTribeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTribeRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateTribeRequest) GetHeadquarters() string {
	if x != nil {
		return x.Headquarters
	}
	return ""
}

func (x *UpdateTribeRequest) GetWbesiteUrl() string {
	if x != nil {
		return x.WbesiteUrl
	}
	return ""
}

type CreateTribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code         string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Tagline      string `protobuf:"bytes,4,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Language     string `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	Headquarters string `protobuf:"bytes,7,opt,name=headquarters,proto3" json:"headquarters,omitempty"`
	WbesiteUrl   string `protobuf:"bytes,8,opt,name=wbesite_url,json=wbesiteUrl,proto3" json:"wbesite_url,omitempty"`
}

func (x *CreateTribeRequest) Reset() {
	*x = CreateTribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTribeRequest) ProtoMessage() {}

func (x *CreateTribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTribeRequest.ProtoReflect.Descriptor instead.
func (*CreateTribeRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTribeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTribeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateTribeRequest) GetTagline() string {
	if x != nil {
		return x.Tagline
	}
	return ""
}

func (x *CreateTribeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTribeRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CreateTribeRequest) GetHeadquarters() string {
	if x != nil {
		return x.Headquarters
	}
	return ""
}

func (x *CreateTribeRequest) GetWbesiteUrl() string {
	if x != nil {
		return x.WbesiteUrl
	}
	return ""
}

type CreateTribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTribeResponse) Reset() {
	*x = CreateTribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTribeResponse) ProtoMessage() {}

func (x *CreateTribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTribeResponse.ProtoReflect.Descriptor instead.
func (*CreateTribeResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTribeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateTribeAvatarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AvatarUrl string `protobuf:"bytes,2,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
}

func (x *UpdateTribeAvatarRequest) Reset() {
	*x = UpdateTribeAvatarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTribeAvatarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTribeAvatarRequest) ProtoMessage() {}

func (x *UpdateTribeAvatarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTribeAvatarRequest.ProtoReflect.Descriptor instead.
func (*UpdateTribeAvatarRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateTribeAvatarRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTribeAvatarRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type GetTribeShareableLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeId string `protobuf:"bytes,1,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetTribeShareableLinkRequest) Reset() {
	*x = GetTribeShareableLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeShareableLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeShareableLinkRequest) ProtoMessage() {}

func (x *GetTribeShareableLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeShareableLinkRequest.ProtoReflect.Descriptor instead.
func (*GetTribeShareableLinkRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{11}
}

func (x *GetTribeShareableLinkRequest) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

func (x *GetTribeShareableLinkRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetTribeByCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetTribeByCodeRequest) Reset() {
	*x = GetTribeByCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeByCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeByCodeRequest) ProtoMessage() {}

func (x *GetTribeByCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeByCodeRequest.ProtoReflect.Descriptor instead.
func (*GetTribeByCodeRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{12}
}

func (x *GetTribeByCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetTribesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetTribesRequest) Reset() {
	*x = GetTribesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribesRequest) ProtoMessage() {}

func (x *GetTribesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribesRequest.ProtoReflect.Descriptor instead.
func (*GetTribesRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{13}
}

func (x *GetTribesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetTribeActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeId string `protobuf:"bytes,1,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
}

func (x *GetTribeActivityRequest) Reset() {
	*x = GetTribeActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeActivityRequest) ProtoMessage() {}

func (x *GetTribeActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeActivityRequest.ProtoReflect.Descriptor instead.
func (*GetTribeActivityRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{14}
}

func (x *GetTribeActivityRequest) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

type GetTribeActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity []*TribeActivity `protobuf:"bytes,1,rep,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetTribeActivityResponse) Reset() {
	*x = GetTribeActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeActivityResponse) ProtoMessage() {}

func (x *GetTribeActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeActivityResponse.ProtoReflect.Descriptor instead.
func (*GetTribeActivityResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{15}
}

func (x *GetTribeActivityResponse) GetActivity() []*TribeActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *GetActivitiesRequest) Reset() {
	*x = GetActivitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivitiesRequest) ProtoMessage() {}

func (x *GetActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivitiesRequest.ProtoReflect.Descriptor instead.
func (*GetActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{16}
}

func (x *GetActivitiesRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type GetActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity []*TribeActivity `protobuf:"bytes,1,rep,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetActivitiesResponse) Reset() {
	*x = GetActivitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivitiesResponse) ProtoMessage() {}

func (x *GetActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivitiesResponse.ProtoReflect.Descriptor instead.
func (*GetActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{17}
}

func (x *GetActivitiesResponse) GetActivity() []*TribeActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetTribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tribe *Tribe `protobuf:"bytes,1,opt,name=tribe,proto3" json:"tribe,omitempty"`
}

func (x *GetTribeResponse) Reset() {
	*x = GetTribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeResponse) ProtoMessage() {}

func (x *GetTribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeResponse.ProtoReflect.Descriptor instead.
func (*GetTribeResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{18}
}

func (x *GetTribeResponse) GetTribe() *Tribe {
	if x != nil {
		return x.Tribe
	}
	return nil
}

type GetTribeByCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tribe *Tribe `protobuf:"bytes,1,opt,name=tribe,proto3" json:"tribe,omitempty"`
}

func (x *GetTribeByCodeResponse) Reset() {
	*x = GetTribeByCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeByCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeByCodeResponse) ProtoMessage() {}

func (x *GetTribeByCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeByCodeResponse.ProtoReflect.Descriptor instead.
func (*GetTribeByCodeResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{19}
}

func (x *GetTribeByCodeResponse) GetTribe() *Tribe {
	if x != nil {
		return x.Tribe
	}
	return nil
}

type GetTribeShareableLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *GetTribeShareableLinkResponse) Reset() {
	*x = GetTribeShareableLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeShareableLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeShareableLinkResponse) ProtoMessage() {}

func (x *GetTribeShareableLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeShareableLinkResponse.ProtoReflect.Descriptor instead.
func (*GetTribeShareableLinkResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{20}
}

func (x *GetTribeShareableLinkResponse) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type GetTribesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tribes []*Tribe `protobuf:"bytes,1,rep,name=tribes,proto3" json:"tribes,omitempty"`
}

func (x *GetTribesResponse) Reset() {
	*x = GetTribesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribesResponse) ProtoMessage() {}

func (x *GetTribesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribesResponse.ProtoReflect.Descriptor instead.
func (*GetTribesResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{21}
}

func (x *GetTribesResponse) GetTribes() []*Tribe {
	if x != nil {
		return x.Tribes
	}
	return nil
}

type GetAllTribesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeIds []string `protobuf:"bytes,1,rep,name=tribeIds,proto3" json:"tribeIds,omitempty"`
}

func (x *GetAllTribesResponse) Reset() {
	*x = GetAllTribesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTribesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTribesResponse) ProtoMessage() {}

func (x *GetAllTribesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTribesResponse.ProtoReflect.Descriptor instead.
func (*GetAllTribesResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{22}
}

func (x *GetAllTribesResponse) GetTribeIds() []string {
	if x != nil {
		return x.TribeIds
	}
	return nil
}

type SendInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId   string `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	ReceiverId string `protobuf:"bytes,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	TribeId    string `protobuf:"bytes,3,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
}

func (x *SendInviteRequest) Reset() {
	*x = SendInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInviteRequest) ProtoMessage() {}

func (x *SendInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInviteRequest.ProtoReflect.Descriptor instead.
func (*SendInviteRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{23}
}

func (x *SendInviteRequest) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *SendInviteRequest) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *SendInviteRequest) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

type AcceptInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *AcceptInviteRequest) Reset() {
	*x = AcceptInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteRequest) ProtoMessage() {}

func (x *AcceptInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptInviteRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{24}
}

func (x *AcceptInviteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AcceptInviteRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type DeclineInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DeclineInviteRequest) Reset() {
	*x = DeclineInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclineInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclineInviteRequest) ProtoMessage() {}

func (x *DeclineInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclineInviteRequest.ProtoReflect.Descriptor instead.
func (*DeclineInviteRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{25}
}

func (x *DeclineInviteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeclineInviteRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ConnectToTribeWithCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ConnectToTribeWithCodeRequest) Reset() {
	*x = ConnectToTribeWithCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectToTribeWithCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectToTribeWithCodeRequest) ProtoMessage() {}

func (x *ConnectToTribeWithCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectToTribeWithCodeRequest.ProtoReflect.Descriptor instead.
func (*ConnectToTribeWithCodeRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{26}
}

func (x *ConnectToTribeWithCodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConnectToTribeWithCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetTribesPerUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pagination *generalpb.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetTribesPerUserRequest) Reset() {
	*x = GetTribesPerUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribesPerUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribesPerUserRequest) ProtoMessage() {}

func (x *GetTribesPerUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribesPerUserRequest.ProtoReflect.Descriptor instead.
func (*GetTribesPerUserRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{27}
}

func (x *GetTribesPerUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetTribesPerUserRequest) GetPagination() *generalpb.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type TribesPerUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeId []string `protobuf:"bytes,1,rep,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
}

func (x *TribesPerUserResponse) Reset() {
	*x = TribesPerUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TribesPerUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TribesPerUserResponse) ProtoMessage() {}

func (x *TribesPerUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TribesPerUserResponse.ProtoReflect.Descriptor instead.
func (*TribesPerUserResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{28}
}

func (x *TribesPerUserResponse) GetTribeId() []string {
	if x != nil {
		return x.TribeId
	}
	return nil
}

type SharedTribesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserFromId string `protobuf:"bytes,1,opt,name=user_from_id,json=userFromId,proto3" json:"user_from_id,omitempty"`
	UserToId   string `protobuf:"bytes,2,opt,name=user_to_id,json=userToId,proto3" json:"user_to_id,omitempty"`
}

func (x *SharedTribesRequest) Reset() {
	*x = SharedTribesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedTribesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedTribesRequest) ProtoMessage() {}

func (x *SharedTribesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedTribesRequest.ProtoReflect.Descriptor instead.
func (*SharedTribesRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{29}
}

func (x *SharedTribesRequest) GetUserFromId() string {
	if x != nil {
		return x.UserFromId
	}
	return ""
}

func (x *SharedTribesRequest) GetUserToId() string {
	if x != nil {
		return x.UserToId
	}
	return ""
}

type GetTribesPerUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tribes []*UserTribeConnection `protobuf:"bytes,1,rep,name=tribes,proto3" json:"tribes,omitempty"`
}

func (x *GetTribesPerUserResponse) Reset() {
	*x = GetTribesPerUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribesPerUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribesPerUserResponse) ProtoMessage() {}

func (x *GetTribesPerUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribesPerUserResponse.ProtoReflect.Descriptor instead.
func (*GetTribesPerUserResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{30}
}

func (x *GetTribesPerUserResponse) GetTribes() []*UserTribeConnection {
	if x != nil {
		return x.Tribes
	}
	return nil
}

type SharedTribesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeIds []string `protobuf:"bytes,1,rep,name=tribe_ids,json=tribeIds,proto3" json:"tribe_ids,omitempty"`
}

func (x *SharedTribesResponse) Reset() {
	*x = SharedTribesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedTribesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedTribesResponse) ProtoMessage() {}

func (x *SharedTribesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedTribesResponse.ProtoReflect.Descriptor instead.
func (*SharedTribesResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{31}
}

func (x *SharedTribesResponse) GetTribeIds() []string {
	if x != nil {
		return x.TribeIds
	}
	return nil
}

type GetTribeMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeId    string                `protobuf:"bytes,1,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
	Pagination *generalpb.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetTribeMembersRequest) Reset() {
	*x = GetTribeMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeMembersRequest) ProtoMessage() {}

func (x *GetTribeMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeMembersRequest.ProtoReflect.Descriptor instead.
func (*GetTribeMembersRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{32}
}

func (x *GetTribeMembersRequest) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

func (x *GetTribeMembersRequest) GetPagination() *generalpb.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetTribeMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*TribeUserConnection `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetTribeMembersResponse) Reset() {
	*x = GetTribeMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTribeMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTribeMembersResponse) ProtoMessage() {}

func (x *GetTribeMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTribeMembersResponse.ProtoReflect.Descriptor instead.
func (*GetTribeMembersResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{33}
}

func (x *GetTribeMembersResponse) GetUsers() []*TribeUserConnection {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetInvitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pagination *generalpb.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetInvitesRequest) Reset() {
	*x = GetInvitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitesRequest) ProtoMessage() {}

func (x *GetInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitesRequest.ProtoReflect.Descriptor instead.
func (*GetInvitesRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{34}
}

func (x *GetInvitesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetInvitesRequest) GetPagination() *generalpb.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetMutualConnectionAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TribeId string `protobuf:"bytes,2,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
}

func (x *GetMutualConnectionAmountRequest) Reset() {
	*x = GetMutualConnectionAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMutualConnectionAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMutualConnectionAmountRequest) ProtoMessage() {}

func (x *GetMutualConnectionAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMutualConnectionAmountRequest.ProtoReflect.Descriptor instead.
func (*GetMutualConnectionAmountRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{35}
}

func (x *GetMutualConnectionAmountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMutualConnectionAmountRequest) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

type GetMutualConnectionAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetMutualConnectionAmountResponse) Reset() {
	*x = GetMutualConnectionAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMutualConnectionAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMutualConnectionAmountResponse) ProtoMessage() {}

func (x *GetMutualConnectionAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMutualConnectionAmountResponse.ProtoReflect.Descriptor instead.
func (*GetMutualConnectionAmountResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{36}
}

func (x *GetMutualConnectionAmountResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteTribeActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
}

func (x *DeleteTribeActivityRequest) Reset() {
	*x = DeleteTribeActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTribeActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTribeActivityRequest) ProtoMessage() {}

func (x *DeleteTribeActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTribeActivityRequest.ProtoReflect.Descriptor instead.
func (*DeleteTribeActivityRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteTribeActivityRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type CreateTribeActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeId   string `protobuf:"bytes,1,opt,name=tribeId,proto3" json:"tribeId,omitempty"`
	RichText  string `protobuf:"bytes,2,opt,name=richText,proto3" json:"richText,omitempty"`
	PlainText string `protobuf:"bytes,3,opt,name=plainText,proto3" json:"plainText,omitempty"`
}

func (x *CreateTribeActivityRequest) Reset() {
	*x = CreateTribeActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTribeActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTribeActivityRequest) ProtoMessage() {}

func (x *CreateTribeActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTribeActivityRequest.ProtoReflect.Descriptor instead.
func (*CreateTribeActivityRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{38}
}

func (x *CreateTribeActivityRequest) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

func (x *CreateTribeActivityRequest) GetRichText() string {
	if x != nil {
		return x.RichText
	}
	return ""
}

func (x *CreateTribeActivityRequest) GetPlainText() string {
	if x != nil {
		return x.PlainText
	}
	return ""
}

type CreateTribeActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTribeActivityResponse) Reset() {
	*x = CreateTribeActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTribeActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTribeActivityResponse) ProtoMessage() {}

func (x *CreateTribeActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTribeActivityResponse.ProtoReflect.Descriptor instead.
func (*CreateTribeActivityResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{39}
}

func (x *CreateTribeActivityResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DisconnectUserFromTribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TribeId string `protobuf:"bytes,2,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
}

func (x *DisconnectUserFromTribeRequest) Reset() {
	*x = DisconnectUserFromTribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectUserFromTribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectUserFromTribeRequest) ProtoMessage() {}

func (x *DisconnectUserFromTribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectUserFromTribeRequest.ProtoReflect.Descriptor instead.
func (*DisconnectUserFromTribeRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{40}
}

func (x *DisconnectUserFromTribeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DisconnectUserFromTribeRequest) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

type GetInvitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TribeInviteCodes []*TribeInviteCode `protobuf:"bytes,1,rep,name=tribe_invite_codes,json=tribeInviteCodes,proto3" json:"tribe_invite_codes,omitempty"`
}

func (x *GetInvitesResponse) Reset() {
	*x = GetInvitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitesResponse) ProtoMessage() {}

func (x *GetInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitesResponse.ProtoReflect.Descriptor instead.
func (*GetInvitesResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{41}
}

func (x *GetInvitesResponse) GetTribeInviteCodes() []*TribeInviteCode {
	if x != nil {
		return x.TribeInviteCodes
	}
	return nil
}

type GetFAQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Faq []*FAQ `protobuf:"bytes,1,rep,name=faq,proto3" json:"faq,omitempty"`
}

func (x *GetFAQResponse) Reset() {
	*x = GetFAQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFAQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFAQResponse) ProtoMessage() {}

func (x *GetFAQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFAQResponse.ProtoReflect.Descriptor instead.
func (*GetFAQResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{42}
}

func (x *GetFAQResponse) GetFaq() []*FAQ {
	if x != nil {
		return x.Faq
	}
	return nil
}

type FetchNumberOfNewConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FetchNumberOfNewConnectionsRequest) Reset() {
	*x = FetchNumberOfNewConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNumberOfNewConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNumberOfNewConnectionsRequest) ProtoMessage() {}

func (x *FetchNumberOfNewConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNumberOfNewConnectionsRequest.ProtoReflect.Descriptor instead.
func (*FetchNumberOfNewConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{43}
}

func (x *FetchNumberOfNewConnectionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FetchNumberOfNewConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FetchNumberOfNewConnectionsResponse) Reset() {
	*x = FetchNumberOfNewConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNumberOfNewConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNumberOfNewConnectionsResponse) ProtoMessage() {}

func (x *FetchNumberOfNewConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNumberOfNewConnectionsResponse.ProtoReflect.Descriptor instead.
func (*FetchNumberOfNewConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{44}
}

func (x *FetchNumberOfNewConnectionsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FetchNumberOfTotalConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FetchNumberOfTotalConnectionsRequest) Reset() {
	*x = FetchNumberOfTotalConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNumberOfTotalConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNumberOfTotalConnectionsRequest) ProtoMessage() {}

func (x *FetchNumberOfTotalConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNumberOfTotalConnectionsRequest.ProtoReflect.Descriptor instead.
func (*FetchNumberOfTotalConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{45}
}

func (x *FetchNumberOfTotalConnectionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type MarkTribeConnectionAsSeenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TribeId string `protobuf:"bytes,2,opt,name=tribe_id,json=tribeId,proto3" json:"tribe_id,omitempty"`
}

func (x *MarkTribeConnectionAsSeenRequest) Reset() {
	*x = MarkTribeConnectionAsSeenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTribeConnectionAsSeenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTribeConnectionAsSeenRequest) ProtoMessage() {}

func (x *MarkTribeConnectionAsSeenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTribeConnectionAsSeenRequest.ProtoReflect.Descriptor instead.
func (*MarkTribeConnectionAsSeenRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{46}
}

func (x *MarkTribeConnectionAsSeenRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MarkTribeConnectionAsSeenRequest) GetTribeId() string {
	if x != nil {
		return x.TribeId
	}
	return ""
}

type FetchNumberOfTotalConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FetchNumberOfTotalConnectionsResponse) Reset() {
	*x = FetchNumberOfTotalConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNumberOfTotalConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNumberOfTotalConnectionsResponse) ProtoMessage() {}

func (x *FetchNumberOfTotalConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNumberOfTotalConnectionsResponse.ProtoReflect.Descriptor instead.
func (*FetchNumberOfTotalConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP(), []int{47}
}

func (x *FetchNumberOfTotalConnectionsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_api_protobuf_spec_connection_tribe_v1_proto protoreflect.FileDescriptor

var file_api_protobuf_spec_connection_tribe_v1_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73,
	0x70, 0x65, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf1, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x69, 0x62, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61,
	0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x22, 0x63, 0x0a, 0x03, 0x46, 0x41, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x46, 0x41, 0x51,
	0x52, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x22, 0x40, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x62,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x54,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x42, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x65,
	0x77, 0x22, 0x40, 0x0a, 0x13, 0x54, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6e, 0x65, 0x77, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x62, 0x65, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x62, 0x65, 0x73, 0x69, 0x74, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61,
	0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x62, 0x65, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x62, 0x65, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x25,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22,
	0x52, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x24, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x54,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x37, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x54,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x54, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x05, 0x74, 0x72, 0x69, 0x62, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x62, 0x65, 0x52, 0x05, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x74, 0x72, 0x69, 0x62, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69,
	0x62, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x62, 0x65, 0x52, 0x06, 0x74, 0x72, 0x69, 0x62, 0x65, 0x73,
	0x22, 0x32, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62, 0x65,
	0x49, 0x64, 0x22, 0x42, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x62, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x49, 0x64, 0x22, 0x5a, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x72, 0x69,
	0x62, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x74, 0x72, 0x69, 0x62, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x14, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x73, 0x22, 0x68,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x61, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0x2d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x1e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x2e, 0x54, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x10, 0x74, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x66, 0x61, 0x71, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x46, 0x41, 0x51, 0x52, 0x03, 0x66, 0x61, 0x71, 0x22,
	0x3d, 0x0a, 0x22, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3b,
	0x0a, 0x23, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3f, 0x0a, 0x24, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x20,
	0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x25, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x32, 0xf0, 0x14, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x62, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72,
	0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73,
	0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x62, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x69, 0x62, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x62, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x54,
	0x72, 0x69, 0x62, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72,
	0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69,
	0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x72, 0x69, 0x62, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x46, 0x41, 0x51, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69,
	0x62, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x4d, 0x61,
	0x72, 0x6b, 0x54, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x54, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x73, 0x53, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x69, 0x62, 0x65, 0x70, 0x62, 0x3b, 0x74, 0x72,
	0x69, 0x62, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_protobuf_spec_connection_tribe_v1_proto_rawDescOnce sync.Once
	file_api_protobuf_spec_connection_tribe_v1_proto_rawDescData = file_api_protobuf_spec_connection_tribe_v1_proto_rawDesc
)

func file_api_protobuf_spec_connection_tribe_v1_proto_rawDescGZIP() []byte {
	file_api_protobuf_spec_connection_tribe_v1_proto_rawDescOnce.Do(func() {
		file_api_protobuf_spec_connection_tribe_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_protobuf_spec_connection_tribe_v1_proto_rawDescData)
	})
	return file_api_protobuf_spec_connection_tribe_v1_proto_rawDescData
}

var file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_api_protobuf_spec_connection_tribe_v1_proto_goTypes = []interface{}{
	(*Tribe)(nil),                                 // 0: connections.tribe.Tribe
	(*FAQ)(nil),                                   // 1: connections.tribe.FAQ
	(*TribeInviteCode)(nil),                       // 2: connections.tribe.TribeInviteCode
	(*TribeActivity)(nil),                         // 3: connections.tribe.TribeActivity
	(*UserTribeConnection)(nil),                   // 4: connections.tribe.UserTribeConnection
	(*TribeUserConnection)(nil),                   // 5: connections.tribe.TribeUserConnection
	(*GetTribeRequest)(nil),                       // 6: connections.tribe.GetTribeRequest
	(*UpdateTribeRequest)(nil),                    // 7: connections.tribe.UpdateTribeRequest
	(*CreateTribeRequest)(nil),                    // 8: connections.tribe.CreateTribeRequest
	(*CreateTribeResponse)(nil),                   // 9: connections.tribe.CreateTribeResponse
	(*UpdateTribeAvatarRequest)(nil),              // 10: connections.tribe.UpdateTribeAvatarRequest
	(*GetTribeShareableLinkRequest)(nil),          // 11: connections.tribe.GetTribeShareableLinkRequest
	(*GetTribeByCodeRequest)(nil),                 // 12: connections.tribe.GetTribeByCodeRequest
	(*GetTribesRequest)(nil),                      // 13: connections.tribe.GetTribesRequest
	(*GetTribeActivityRequest)(nil),               // 14: connections.tribe.GetTribeActivityRequest
	(*GetTribeActivityResponse)(nil),              // 15: connections.tribe.GetTribeActivityResponse
	(*GetActivitiesRequest)(nil),                  // 16: connections.tribe.GetActivitiesRequest
	(*GetActivitiesResponse)(nil),                 // 17: connections.tribe.GetActivitiesResponse
	(*GetTribeResponse)(nil),                      // 18: connections.tribe.GetTribeResponse
	(*GetTribeByCodeResponse)(nil),                // 19: connections.tribe.GetTribeByCodeResponse
	(*GetTribeShareableLinkResponse)(nil),         // 20: connections.tribe.GetTribeShareableLinkResponse
	(*GetTribesResponse)(nil),                     // 21: connections.tribe.GetTribesResponse
	(*GetAllTribesResponse)(nil),                  // 22: connections.tribe.GetAllTribesResponse
	(*SendInviteRequest)(nil),                     // 23: connections.tribe.SendInviteRequest
	(*AcceptInviteRequest)(nil),                   // 24: connections.tribe.AcceptInviteRequest
	(*DeclineInviteRequest)(nil),                  // 25: connections.tribe.DeclineInviteRequest
	(*ConnectToTribeWithCodeRequest)(nil),         // 26: connections.tribe.ConnectToTribeWithCodeRequest
	(*GetTribesPerUserRequest)(nil),               // 27: connections.tribe.GetTribesPerUserRequest
	(*TribesPerUserResponse)(nil),                 // 28: connections.tribe.TribesPerUserResponse
	(*SharedTribesRequest)(nil),                   // 29: connections.tribe.SharedTribesRequest
	(*GetTribesPerUserResponse)(nil),              // 30: connections.tribe.GetTribesPerUserResponse
	(*SharedTribesResponse)(nil),                  // 31: connections.tribe.SharedTribesResponse
	(*GetTribeMembersRequest)(nil),                // 32: connections.tribe.GetTribeMembersRequest
	(*GetTribeMembersResponse)(nil),               // 33: connections.tribe.GetTribeMembersResponse
	(*GetInvitesRequest)(nil),                     // 34: connections.tribe.GetInvitesRequest
	(*GetMutualConnectionAmountRequest)(nil),      // 35: connections.tribe.GetMutualConnectionAmountRequest
	(*GetMutualConnectionAmountResponse)(nil),     // 36: connections.tribe.GetMutualConnectionAmountResponse
	(*DeleteTribeActivityRequest)(nil),            // 37: connections.tribe.DeleteTribeActivityRequest
	(*CreateTribeActivityRequest)(nil),            // 38: connections.tribe.CreateTribeActivityRequest
	(*CreateTribeActivityResponse)(nil),           // 39: connections.tribe.CreateTribeActivityResponse
	(*DisconnectUserFromTribeRequest)(nil),        // 40: connections.tribe.DisconnectUserFromTribeRequest
	(*GetInvitesResponse)(nil),                    // 41: connections.tribe.GetInvitesResponse
	(*GetFAQResponse)(nil),                        // 42: connections.tribe.GetFAQResponse
	(*FetchNumberOfNewConnectionsRequest)(nil),    // 43: connections.tribe.FetchNumberOfNewConnectionsRequest
	(*FetchNumberOfNewConnectionsResponse)(nil),   // 44: connections.tribe.FetchNumberOfNewConnectionsResponse
	(*FetchNumberOfTotalConnectionsRequest)(nil),  // 45: connections.tribe.FetchNumberOfTotalConnectionsRequest
	(*MarkTribeConnectionAsSeenRequest)(nil),      // 46: connections.tribe.MarkTribeConnectionAsSeenRequest
	(*FetchNumberOfTotalConnectionsResponse)(nil), // 47: connections.tribe.FetchNumberOfTotalConnectionsResponse
	(*timestamp.Timestamp)(nil),                   // 48: google.protobuf.Timestamp
	(*generalpb.Pagination)(nil),                  // 49: general.Pagination
	(*empty.Empty)(nil),                           // 50: google.protobuf.Empty
}
var file_api_protobuf_spec_connection_tribe_v1_proto_depIdxs = []int32{
	1,  // 0: connections.tribe.FAQ.childs:type_name -> connections.tribe.FAQ
	48, // 1: connections.tribe.TribeActivity.createdAt:type_name -> google.protobuf.Timestamp
	3,  // 2: connections.tribe.GetTribeActivityResponse.activity:type_name -> connections.tribe.TribeActivity
	3,  // 3: connections.tribe.GetActivitiesResponse.activity:type_name -> connections.tribe.TribeActivity
	0,  // 4: connections.tribe.GetTribeResponse.tribe:type_name -> connections.tribe.Tribe
	0,  // 5: connections.tribe.GetTribeByCodeResponse.tribe:type_name -> connections.tribe.Tribe
	0,  // 6: connections.tribe.GetTribesResponse.tribes:type_name -> connections.tribe.Tribe
	49, // 7: connections.tribe.GetTribesPerUserRequest.pagination:type_name -> general.Pagination
	4,  // 8: connections.tribe.GetTribesPerUserResponse.tribes:type_name -> connections.tribe.UserTribeConnection
	49, // 9: connections.tribe.GetTribeMembersRequest.pagination:type_name -> general.Pagination
	5,  // 10: connections.tribe.GetTribeMembersResponse.users:type_name -> connections.tribe.TribeUserConnection
	49, // 11: connections.tribe.GetInvitesRequest.pagination:type_name -> general.Pagination
	2,  // 12: connections.tribe.GetInvitesResponse.tribe_invite_codes:type_name -> connections.tribe.TribeInviteCode
	1,  // 13: connections.tribe.GetFAQResponse.faq:type_name -> connections.tribe.FAQ
	6,  // 14: connections.tribe.TribeService.GetTribe:input_type -> connections.tribe.GetTribeRequest
	8,  // 15: connections.tribe.TribeService.CreateTribe:input_type -> connections.tribe.CreateTribeRequest
	7,  // 16: connections.tribe.TribeService.UpdateTribe:input_type -> connections.tribe.UpdateTribeRequest
	10, // 17: connections.tribe.TribeService.UpdateTribeAvatar:input_type -> connections.tribe.UpdateTribeAvatarRequest
	12, // 18: connections.tribe.TribeService.GetTribeByCode:input_type -> connections.tribe.GetTribeByCodeRequest
	11, // 19: connections.tribe.TribeService.GetTribeShareableLink:input_type -> connections.tribe.GetTribeShareableLinkRequest
	13, // 20: connections.tribe.TribeService.GetTribes:input_type -> connections.tribe.GetTribesRequest
	50, // 21: connections.tribe.TribeService.GetAllTribes:input_type -> google.protobuf.Empty
	14, // 22: connections.tribe.TribeService.GetTribeActivity:input_type -> connections.tribe.GetTribeActivityRequest
	16, // 23: connections.tribe.TribeService.GetActivities:input_type -> connections.tribe.GetActivitiesRequest
	29, // 24: connections.tribe.TribeService.SharedTribes:input_type -> connections.tribe.SharedTribesRequest
	23, // 25: connections.tribe.TribeService.SendInvite:input_type -> connections.tribe.SendInviteRequest
	24, // 26: connections.tribe.TribeService.AcceptInvite:input_type -> connections.tribe.AcceptInviteRequest
	25, // 27: connections.tribe.TribeService.DeclineInvite:input_type -> connections.tribe.DeclineInviteRequest
	26, // 28: connections.tribe.TribeService.ConnectToTribeWithCode:input_type -> connections.tribe.ConnectToTribeWithCodeRequest
	27, // 29: connections.tribe.TribeService.GetTribesPerUser:input_type -> connections.tribe.GetTribesPerUserRequest
	32, // 30: connections.tribe.TribeService.GetTribeMembers:input_type -> connections.tribe.GetTribeMembersRequest
	34, // 31: connections.tribe.TribeService.GetInvites:input_type -> connections.tribe.GetInvitesRequest
	35, // 32: connections.tribe.TribeService.GetMutualConnections:input_type -> connections.tribe.GetMutualConnectionAmountRequest
	40, // 33: connections.tribe.TribeService.DisconnectUserFromTribe:input_type -> connections.tribe.DisconnectUserFromTribeRequest
	37, // 34: connections.tribe.TribeService.DeleteTribeActivity:input_type -> connections.tribe.DeleteTribeActivityRequest
	38, // 35: connections.tribe.TribeService.CreateTribeActivity:input_type -> connections.tribe.CreateTribeActivityRequest
	50, // 36: connections.tribe.TribeService.GetFAQ:input_type -> google.protobuf.Empty
	43, // 37: connections.tribe.TribeService.FetchNumberOfNewConnections:input_type -> connections.tribe.FetchNumberOfNewConnectionsRequest
	45, // 38: connections.tribe.TribeService.FetchNumberOfTotalConnections:input_type -> connections.tribe.FetchNumberOfTotalConnectionsRequest
	46, // 39: connections.tribe.TribeService.MarkTribeConnectionAsSeen:input_type -> connections.tribe.MarkTribeConnectionAsSeenRequest
	18, // 40: connections.tribe.TribeService.GetTribe:output_type -> connections.tribe.GetTribeResponse
	9,  // 41: connections.tribe.TribeService.CreateTribe:output_type -> connections.tribe.CreateTribeResponse
	50, // 42: connections.tribe.TribeService.UpdateTribe:output_type -> google.protobuf.Empty
	50, // 43: connections.tribe.TribeService.UpdateTribeAvatar:output_type -> google.protobuf.Empty
	19, // 44: connections.tribe.TribeService.GetTribeByCode:output_type -> connections.tribe.GetTribeByCodeResponse
	20, // 45: connections.tribe.TribeService.GetTribeShareableLink:output_type -> connections.tribe.GetTribeShareableLinkResponse
	21, // 46: connections.tribe.TribeService.GetTribes:output_type -> connections.tribe.GetTribesResponse
	22, // 47: connections.tribe.TribeService.GetAllTribes:output_type -> connections.tribe.GetAllTribesResponse
	15, // 48: connections.tribe.TribeService.GetTribeActivity:output_type -> connections.tribe.GetTribeActivityResponse
	17, // 49: connections.tribe.TribeService.GetActivities:output_type -> connections.tribe.GetActivitiesResponse
	31, // 50: connections.tribe.TribeService.SharedTribes:output_type -> connections.tribe.SharedTribesResponse
	50, // 51: connections.tribe.TribeService.SendInvite:output_type -> google.protobuf.Empty
	50, // 52: connections.tribe.TribeService.AcceptInvite:output_type -> google.protobuf.Empty
	50, // 53: connections.tribe.TribeService.DeclineInvite:output_type -> google.protobuf.Empty
	50, // 54: connections.tribe.TribeService.ConnectToTribeWithCode:output_type -> google.protobuf.Empty
	30, // 55: connections.tribe.TribeService.GetTribesPerUser:output_type -> connections.tribe.GetTribesPerUserResponse
	33, // 56: connections.tribe.TribeService.GetTribeMembers:output_type -> connections.tribe.GetTribeMembersResponse
	41, // 57: connections.tribe.TribeService.GetInvites:output_type -> connections.tribe.GetInvitesResponse
	36, // 58: connections.tribe.TribeService.GetMutualConnections:output_type -> connections.tribe.GetMutualConnectionAmountResponse
	50, // 59: connections.tribe.TribeService.DisconnectUserFromTribe:output_type -> google.protobuf.Empty
	50, // 60: connections.tribe.TribeService.DeleteTribeActivity:output_type -> google.protobuf.Empty
	39, // 61: connections.tribe.TribeService.CreateTribeActivity:output_type -> connections.tribe.CreateTribeActivityResponse
	42, // 62: connections.tribe.TribeService.GetFAQ:output_type -> connections.tribe.GetFAQResponse
	44, // 63: connections.tribe.TribeService.FetchNumberOfNewConnections:output_type -> connections.tribe.FetchNumberOfNewConnectionsResponse
	47, // 64: connections.tribe.TribeService.FetchNumberOfTotalConnections:output_type -> connections.tribe.FetchNumberOfTotalConnectionsResponse
	50, // 65: connections.tribe.TribeService.MarkTribeConnectionAsSeen:output_type -> google.protobuf.Empty
	40, // [40:66] is the sub-list for method output_type
	14, // [14:40] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_protobuf_spec_connection_tribe_v1_proto_init() }
func file_api_protobuf_spec_connection_tribe_v1_proto_init() {
	if File_api_protobuf_spec_connection_tribe_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FAQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TribeInviteCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TribeActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTribeConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TribeUserConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTribeAvatarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeShareableLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeByCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeByCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeShareableLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTribesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclineInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectToTribeWithCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribesPerUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TribesPerUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedTribesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribesPerUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedTribesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTribeMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMutualConnectionAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMutualConnectionAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTribeActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTribeActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTribeActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectUserFromTribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFAQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNumberOfNewConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNumberOfNewConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNumberOfTotalConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTribeConnectionAsSeenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNumberOfTotalConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_protobuf_spec_connection_tribe_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_protobuf_spec_connection_tribe_v1_proto_goTypes,
		DependencyIndexes: file_api_protobuf_spec_connection_tribe_v1_proto_depIdxs,
		MessageInfos:      file_api_protobuf_spec_connection_tribe_v1_proto_msgTypes,
	}.Build()
	File_api_protobuf_spec_connection_tribe_v1_proto = out.File
	file_api_protobuf_spec_connection_tribe_v1_proto_rawDesc = nil
	file_api_protobuf_spec_connection_tribe_v1_proto_goTypes = nil
	file_api_protobuf_spec_connection_tribe_v1_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TribeServiceClient is the client API for TribeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TribeServiceClient interface {
	GetTribe(ctx context.Context, in *GetTribeRequest, opts ...grpc.CallOption) (*GetTribeResponse, error)
	CreateTribe(ctx context.Context, in *CreateTribeRequest, opts ...grpc.CallOption) (*CreateTribeResponse, error)
	UpdateTribe(ctx context.Context, in *UpdateTribeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateTribeAvatar(ctx context.Context, in *UpdateTribeAvatarRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTribeByCode(ctx context.Context, in *GetTribeByCodeRequest, opts ...grpc.CallOption) (*GetTribeByCodeResponse, error)
	GetTribeShareableLink(ctx context.Context, in *GetTribeShareableLinkRequest, opts ...grpc.CallOption) (*GetTribeShareableLinkResponse, error)
	GetTribes(ctx context.Context, in *GetTribesRequest, opts ...grpc.CallOption) (*GetTribesResponse, error)
	GetAllTribes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllTribesResponse, error)
	GetTribeActivity(ctx context.Context, in *GetTribeActivityRequest, opts ...grpc.CallOption) (*GetTribeActivityResponse, error)
	GetActivities(ctx context.Context, in *GetActivitiesRequest, opts ...grpc.CallOption) (*GetActivitiesResponse, error)
	SharedTribes(ctx context.Context, in *SharedTribesRequest, opts ...grpc.CallOption) (*SharedTribesResponse, error)
	SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeclineInvite(ctx context.Context, in *DeclineInviteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ConnectToTribeWithCode(ctx context.Context, in *ConnectToTribeWithCodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTribesPerUser(ctx context.Context, in *GetTribesPerUserRequest, opts ...grpc.CallOption) (*GetTribesPerUserResponse, error)
	GetTribeMembers(ctx context.Context, in *GetTribeMembersRequest, opts ...grpc.CallOption) (*GetTribeMembersResponse, error)
	GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (*GetInvitesResponse, error)
	GetMutualConnections(ctx context.Context, in *GetMutualConnectionAmountRequest, opts ...grpc.CallOption) (*GetMutualConnectionAmountResponse, error)
	DisconnectUserFromTribe(ctx context.Context, in *DisconnectUserFromTribeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteTribeActivity(ctx context.Context, in *DeleteTribeActivityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateTribeActivity(ctx context.Context, in *CreateTribeActivityRequest, opts ...grpc.CallOption) (*CreateTribeActivityResponse, error)
	GetFAQ(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetFAQResponse, error)
	FetchNumberOfNewConnections(ctx context.Context, in *FetchNumberOfNewConnectionsRequest, opts ...grpc.CallOption) (*FetchNumberOfNewConnectionsResponse, error)
	FetchNumberOfTotalConnections(ctx context.Context, in *FetchNumberOfTotalConnectionsRequest, opts ...grpc.CallOption) (*FetchNumberOfTotalConnectionsResponse, error)
	MarkTribeConnectionAsSeen(ctx context.Context, in *MarkTribeConnectionAsSeenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type tribeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTribeServiceClient(cc grpc.ClientConnInterface) TribeServiceClient {
	return &tribeServiceClient{cc}
}

func (c *tribeServiceClient) GetTribe(ctx context.Context, in *GetTribeRequest, opts ...grpc.CallOption) (*GetTribeResponse, error) {
	out := new(GetTribeResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetTribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) CreateTribe(ctx context.Context, in *CreateTribeRequest, opts ...grpc.CallOption) (*CreateTribeResponse, error) {
	out := new(CreateTribeResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/CreateTribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) UpdateTribe(ctx context.Context, in *UpdateTribeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/UpdateTribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) UpdateTribeAvatar(ctx context.Context, in *UpdateTribeAvatarRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/UpdateTribeAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetTribeByCode(ctx context.Context, in *GetTribeByCodeRequest, opts ...grpc.CallOption) (*GetTribeByCodeResponse, error) {
	out := new(GetTribeByCodeResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetTribeByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetTribeShareableLink(ctx context.Context, in *GetTribeShareableLinkRequest, opts ...grpc.CallOption) (*GetTribeShareableLinkResponse, error) {
	out := new(GetTribeShareableLinkResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetTribeShareableLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetTribes(ctx context.Context, in *GetTribesRequest, opts ...grpc.CallOption) (*GetTribesResponse, error) {
	out := new(GetTribesResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetTribes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetAllTribes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllTribesResponse, error) {
	out := new(GetAllTribesResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetAllTribes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetTribeActivity(ctx context.Context, in *GetTribeActivityRequest, opts ...grpc.CallOption) (*GetTribeActivityResponse, error) {
	out := new(GetTribeActivityResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetTribeActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetActivities(ctx context.Context, in *GetActivitiesRequest, opts ...grpc.CallOption) (*GetActivitiesResponse, error) {
	out := new(GetActivitiesResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) SharedTribes(ctx context.Context, in *SharedTribesRequest, opts ...grpc.CallOption) (*SharedTribesResponse, error) {
	out := new(SharedTribesResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/SharedTribes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/SendInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) DeclineInvite(ctx context.Context, in *DeclineInviteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/DeclineInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) ConnectToTribeWithCode(ctx context.Context, in *ConnectToTribeWithCodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/ConnectToTribeWithCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetTribesPerUser(ctx context.Context, in *GetTribesPerUserRequest, opts ...grpc.CallOption) (*GetTribesPerUserResponse, error) {
	out := new(GetTribesPerUserResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetTribesPerUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetTribeMembers(ctx context.Context, in *GetTribeMembersRequest, opts ...grpc.CallOption) (*GetTribeMembersResponse, error) {
	out := new(GetTribeMembersResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetTribeMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (*GetInvitesResponse, error) {
	out := new(GetInvitesResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetMutualConnections(ctx context.Context, in *GetMutualConnectionAmountRequest, opts ...grpc.CallOption) (*GetMutualConnectionAmountResponse, error) {
	out := new(GetMutualConnectionAmountResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetMutualConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) DisconnectUserFromTribe(ctx context.Context, in *DisconnectUserFromTribeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/DisconnectUserFromTribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) DeleteTribeActivity(ctx context.Context, in *DeleteTribeActivityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/DeleteTribeActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) CreateTribeActivity(ctx context.Context, in *CreateTribeActivityRequest, opts ...grpc.CallOption) (*CreateTribeActivityResponse, error) {
	out := new(CreateTribeActivityResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/CreateTribeActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) GetFAQ(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetFAQResponse, error) {
	out := new(GetFAQResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/GetFAQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) FetchNumberOfNewConnections(ctx context.Context, in *FetchNumberOfNewConnectionsRequest, opts ...grpc.CallOption) (*FetchNumberOfNewConnectionsResponse, error) {
	out := new(FetchNumberOfNewConnectionsResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/FetchNumberOfNewConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) FetchNumberOfTotalConnections(ctx context.Context, in *FetchNumberOfTotalConnectionsRequest, opts ...grpc.CallOption) (*FetchNumberOfTotalConnectionsResponse, error) {
	out := new(FetchNumberOfTotalConnectionsResponse)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/FetchNumberOfTotalConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) MarkTribeConnectionAsSeen(ctx context.Context, in *MarkTribeConnectionAsSeenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connections.tribe.TribeService/MarkTribeConnectionAsSeen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TribeServiceServer is the server API for TribeService service.
type TribeServiceServer interface {
	GetTribe(context.Context, *GetTribeRequest) (*GetTribeResponse, error)
	CreateTribe(context.Context, *CreateTribeRequest) (*CreateTribeResponse, error)
	UpdateTribe(context.Context, *UpdateTribeRequest) (*empty.Empty, error)
	UpdateTribeAvatar(context.Context, *UpdateTribeAvatarRequest) (*empty.Empty, error)
	GetTribeByCode(context.Context, *GetTribeByCodeRequest) (*GetTribeByCodeResponse, error)
	GetTribeShareableLink(context.Context, *GetTribeShareableLinkRequest) (*GetTribeShareableLinkResponse, error)
	GetTribes(context.Context, *GetTribesRequest) (*GetTribesResponse, error)
	GetAllTribes(context.Context, *empty.Empty) (*GetAllTribesResponse, error)
	GetTribeActivity(context.Context, *GetTribeActivityRequest) (*GetTribeActivityResponse, error)
	GetActivities(context.Context, *GetActivitiesRequest) (*GetActivitiesResponse, error)
	SharedTribes(context.Context, *SharedTribesRequest) (*SharedTribesResponse, error)
	SendInvite(context.Context, *SendInviteRequest) (*empty.Empty, error)
	AcceptInvite(context.Context, *AcceptInviteRequest) (*empty.Empty, error)
	DeclineInvite(context.Context, *DeclineInviteRequest) (*empty.Empty, error)
	ConnectToTribeWithCode(context.Context, *ConnectToTribeWithCodeRequest) (*empty.Empty, error)
	GetTribesPerUser(context.Context, *GetTribesPerUserRequest) (*GetTribesPerUserResponse, error)
	GetTribeMembers(context.Context, *GetTribeMembersRequest) (*GetTribeMembersResponse, error)
	GetInvites(context.Context, *GetInvitesRequest) (*GetInvitesResponse, error)
	GetMutualConnections(context.Context, *GetMutualConnectionAmountRequest) (*GetMutualConnectionAmountResponse, error)
	DisconnectUserFromTribe(context.Context, *DisconnectUserFromTribeRequest) (*empty.Empty, error)
	DeleteTribeActivity(context.Context, *DeleteTribeActivityRequest) (*empty.Empty, error)
	CreateTribeActivity(context.Context, *CreateTribeActivityRequest) (*CreateTribeActivityResponse, error)
	GetFAQ(context.Context, *empty.Empty) (*GetFAQResponse, error)
	FetchNumberOfNewConnections(context.Context, *FetchNumberOfNewConnectionsRequest) (*FetchNumberOfNewConnectionsResponse, error)
	FetchNumberOfTotalConnections(context.Context, *FetchNumberOfTotalConnectionsRequest) (*FetchNumberOfTotalConnectionsResponse, error)
	MarkTribeConnectionAsSeen(context.Context, *MarkTribeConnectionAsSeenRequest) (*empty.Empty, error)
}

// UnimplementedTribeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTribeServiceServer struct {
}

func (*UnimplementedTribeServiceServer) GetTribe(context.Context, *GetTribeRequest) (*GetTribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribe not implemented")
}
func (*UnimplementedTribeServiceServer) CreateTribe(context.Context, *CreateTribeRequest) (*CreateTribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTribe not implemented")
}
func (*UnimplementedTribeServiceServer) UpdateTribe(context.Context, *UpdateTribeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTribe not implemented")
}
func (*UnimplementedTribeServiceServer) UpdateTribeAvatar(context.Context, *UpdateTribeAvatarRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTribeAvatar not implemented")
}
func (*UnimplementedTribeServiceServer) GetTribeByCode(context.Context, *GetTribeByCodeRequest) (*GetTribeByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribeByCode not implemented")
}
func (*UnimplementedTribeServiceServer) GetTribeShareableLink(context.Context, *GetTribeShareableLinkRequest) (*GetTribeShareableLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribeShareableLink not implemented")
}
func (*UnimplementedTribeServiceServer) GetTribes(context.Context, *GetTribesRequest) (*GetTribesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribes not implemented")
}
func (*UnimplementedTribeServiceServer) GetAllTribes(context.Context, *empty.Empty) (*GetAllTribesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTribes not implemented")
}
func (*UnimplementedTribeServiceServer) GetTribeActivity(context.Context, *GetTribeActivityRequest) (*GetTribeActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribeActivity not implemented")
}
func (*UnimplementedTribeServiceServer) GetActivities(context.Context, *GetActivitiesRequest) (*GetActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivities not implemented")
}
func (*UnimplementedTribeServiceServer) SharedTribes(context.Context, *SharedTribesRequest) (*SharedTribesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedTribes not implemented")
}
func (*UnimplementedTribeServiceServer) SendInvite(context.Context, *SendInviteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvite not implemented")
}
func (*UnimplementedTribeServiceServer) AcceptInvite(context.Context, *AcceptInviteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (*UnimplementedTribeServiceServer) DeclineInvite(context.Context, *DeclineInviteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineInvite not implemented")
}
func (*UnimplementedTribeServiceServer) ConnectToTribeWithCode(context.Context, *ConnectToTribeWithCodeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToTribeWithCode not implemented")
}
func (*UnimplementedTribeServiceServer) GetTribesPerUser(context.Context, *GetTribesPerUserRequest) (*GetTribesPerUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribesPerUser not implemented")
}
func (*UnimplementedTribeServiceServer) GetTribeMembers(context.Context, *GetTribeMembersRequest) (*GetTribeMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribeMembers not implemented")
}
func (*UnimplementedTribeServiceServer) GetInvites(context.Context, *GetInvitesRequest) (*GetInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvites not implemented")
}
func (*UnimplementedTribeServiceServer) GetMutualConnections(context.Context, *GetMutualConnectionAmountRequest) (*GetMutualConnectionAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMutualConnections not implemented")
}
func (*UnimplementedTribeServiceServer) DisconnectUserFromTribe(context.Context, *DisconnectUserFromTribeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectUserFromTribe not implemented")
}
func (*UnimplementedTribeServiceServer) DeleteTribeActivity(context.Context, *DeleteTribeActivityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTribeActivity not implemented")
}
func (*UnimplementedTribeServiceServer) CreateTribeActivity(context.Context, *CreateTribeActivityRequest) (*CreateTribeActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTribeActivity not implemented")
}
func (*UnimplementedTribeServiceServer) GetFAQ(context.Context, *empty.Empty) (*GetFAQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFAQ not implemented")
}
func (*UnimplementedTribeServiceServer) FetchNumberOfNewConnections(context.Context, *FetchNumberOfNewConnectionsRequest) (*FetchNumberOfNewConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNumberOfNewConnections not implemented")
}
func (*UnimplementedTribeServiceServer) FetchNumberOfTotalConnections(context.Context, *FetchNumberOfTotalConnectionsRequest) (*FetchNumberOfTotalConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNumberOfTotalConnections not implemented")
}
func (*UnimplementedTribeServiceServer) MarkTribeConnectionAsSeen(context.Context, *MarkTribeConnectionAsSeenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTribeConnectionAsSeen not implemented")
}

func RegisterTribeServiceServer(s *grpc.Server, srv TribeServiceServer) {
	s.RegisterService(&_TribeService_serviceDesc, srv)
}

func _TribeService_GetTribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetTribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetTribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetTribe(ctx, req.(*GetTribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_CreateTribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).CreateTribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/CreateTribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).CreateTribe(ctx, req.(*CreateTribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_UpdateTribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).UpdateTribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/UpdateTribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).UpdateTribe(ctx, req.(*UpdateTribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_UpdateTribeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTribeAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).UpdateTribeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/UpdateTribeAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).UpdateTribeAvatar(ctx, req.(*UpdateTribeAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetTribeByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribeByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetTribeByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetTribeByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetTribeByCode(ctx, req.(*GetTribeByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetTribeShareableLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribeShareableLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetTribeShareableLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetTribeShareableLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetTribeShareableLink(ctx, req.(*GetTribeShareableLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetTribes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetTribes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetTribes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetTribes(ctx, req.(*GetTribesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetAllTribes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetAllTribes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetAllTribes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetAllTribes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetTribeActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribeActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetTribeActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetTribeActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetTribeActivity(ctx, req.(*GetTribeActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetActivities(ctx, req.(*GetActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_SharedTribes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedTribesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).SharedTribes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/SharedTribes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).SharedTribes(ctx, req.(*SharedTribesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_SendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).SendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/SendInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).SendInvite(ctx, req.(*SendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_DeclineInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).DeclineInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/DeclineInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).DeclineInvite(ctx, req.(*DeclineInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_ConnectToTribeWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectToTribeWithCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).ConnectToTribeWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/ConnectToTribeWithCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).ConnectToTribeWithCode(ctx, req.(*ConnectToTribeWithCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetTribesPerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribesPerUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetTribesPerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetTribesPerUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetTribesPerUser(ctx, req.(*GetTribesPerUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetTribeMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribeMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetTribeMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetTribeMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetTribeMembers(ctx, req.(*GetTribeMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetInvites(ctx, req.(*GetInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetMutualConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMutualConnectionAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetMutualConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetMutualConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetMutualConnections(ctx, req.(*GetMutualConnectionAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_DisconnectUserFromTribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectUserFromTribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).DisconnectUserFromTribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/DisconnectUserFromTribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).DisconnectUserFromTribe(ctx, req.(*DisconnectUserFromTribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_DeleteTribeActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTribeActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).DeleteTribeActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/DeleteTribeActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).DeleteTribeActivity(ctx, req.(*DeleteTribeActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_CreateTribeActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTribeActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).CreateTribeActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/CreateTribeActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).CreateTribeActivity(ctx, req.(*CreateTribeActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_GetFAQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).GetFAQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/GetFAQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).GetFAQ(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_FetchNumberOfNewConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNumberOfNewConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).FetchNumberOfNewConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/FetchNumberOfNewConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).FetchNumberOfNewConnections(ctx, req.(*FetchNumberOfNewConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_FetchNumberOfTotalConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNumberOfTotalConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).FetchNumberOfTotalConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/FetchNumberOfTotalConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).FetchNumberOfTotalConnections(ctx, req.(*FetchNumberOfTotalConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_MarkTribeConnectionAsSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkTribeConnectionAsSeenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).MarkTribeConnectionAsSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.tribe.TribeService/MarkTribeConnectionAsSeen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).MarkTribeConnectionAsSeen(ctx, req.(*MarkTribeConnectionAsSeenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TribeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connections.tribe.TribeService",
	HandlerType: (*TribeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTribe",
			Handler:    _TribeService_GetTribe_Handler,
		},
		{
			MethodName: "CreateTribe",
			Handler:    _TribeService_CreateTribe_Handler,
		},
		{
			MethodName: "UpdateTribe",
			Handler:    _TribeService_UpdateTribe_Handler,
		},
		{
			MethodName: "UpdateTribeAvatar",
			Handler:    _TribeService_UpdateTribeAvatar_Handler,
		},
		{
			MethodName: "GetTribeByCode",
			Handler:    _TribeService_GetTribeByCode_Handler,
		},
		{
			MethodName: "GetTribeShareableLink",
			Handler:    _TribeService_GetTribeShareableLink_Handler,
		},
		{
			MethodName: "GetTribes",
			Handler:    _TribeService_GetTribes_Handler,
		},
		{
			MethodName: "GetAllTribes",
			Handler:    _TribeService_GetAllTribes_Handler,
		},
		{
			MethodName: "GetTribeActivity",
			Handler:    _TribeService_GetTribeActivity_Handler,
		},
		{
			MethodName: "GetActivities",
			Handler:    _TribeService_GetActivities_Handler,
		},
		{
			MethodName: "SharedTribes",
			Handler:    _TribeService_SharedTribes_Handler,
		},
		{
			MethodName: "SendInvite",
			Handler:    _TribeService_SendInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _TribeService_AcceptInvite_Handler,
		},
		{
			MethodName: "DeclineInvite",
			Handler:    _TribeService_DeclineInvite_Handler,
		},
		{
			MethodName: "ConnectToTribeWithCode",
			Handler:    _TribeService_ConnectToTribeWithCode_Handler,
		},
		{
			MethodName: "GetTribesPerUser",
			Handler:    _TribeService_GetTribesPerUser_Handler,
		},
		{
			MethodName: "GetTribeMembers",
			Handler:    _TribeService_GetTribeMembers_Handler,
		},
		{
			MethodName: "GetInvites",
			Handler:    _TribeService_GetInvites_Handler,
		},
		{
			MethodName: "GetMutualConnections",
			Handler:    _TribeService_GetMutualConnections_Handler,
		},
		{
			MethodName: "DisconnectUserFromTribe",
			Handler:    _TribeService_DisconnectUserFromTribe_Handler,
		},
		{
			MethodName: "DeleteTribeActivity",
			Handler:    _TribeService_DeleteTribeActivity_Handler,
		},
		{
			MethodName: "CreateTribeActivity",
			Handler:    _TribeService_CreateTribeActivity_Handler,
		},
		{
			MethodName: "GetFAQ",
			Handler:    _TribeService_GetFAQ_Handler,
		},
		{
			MethodName: "FetchNumberOfNewConnections",
			Handler:    _TribeService_FetchNumberOfNewConnections_Handler,
		},
		{
			MethodName: "FetchNumberOfTotalConnections",
			Handler:    _TribeService_FetchNumberOfTotalConnections_Handler,
		},
		{
			MethodName: "MarkTribeConnectionAsSeen",
			Handler:    _TribeService_MarkTribeConnectionAsSeen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf-spec/connection_tribe_v1.proto",
}
